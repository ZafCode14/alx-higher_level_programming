The ``101-lazy_matrix_mul`` module
===============================

Using ``lazy_matrix_mul``
------------------------

'importing ``lazy_matrix_mul`` form the ``101-lazy_matrix_mul`` module:'
	>>> matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Testing:

'Testing the output if entered correctly'
	>>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
	[[ 7 10]
	 [15 22]]

	>>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
	[[13 16]]

'Testing missing args'
	>>> print(matrix_mul([[1, 2], [3, 4]]))
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

	>>> print(matrix_mul())
	Traceback (most recent call last):
	TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

'Testing m_a and m_b must be a list of lists of integers or floats'
'	if m_a not list '
	>>> print(matrix_mul("not list", [[1, 2], [3, 4]]))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

'	if m_b not list '
	>>> print(matrix_mul([[1, 2], [3, 4]], "not list"))
	Traceback (most recent call last):
	ValueError: Scalar operands are not allowed, use '*' instead

'	if m_a not a list of lists'
	>>> print(matrix_mul([[1, 2], "not list"], [[1, 2], [3, 4]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence

'	if m_b not a list of lists'
	>>> print(matrix_mul([[1, 2], [3, 4]], ["not list", [3, 4]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence

'	if m_a is empty'
	>>> print(matrix_mul([], [[1, 2], [3, 4]]))
	Traceback (most recent call last):
	ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

'	if m_b is empty'
	>>> print(matrix_mul([[1, 2], [3, 4]], []))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)

'	if m_a does not have all integers'
	>>> print(matrix_mul([[1, 2], ["not integer", 4]], [[1, 2], [3, 4]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

'	if m_b does not have all integers'
	>>> print(matrix_mul([[1, 2], [3, 4]], [["not integer", 2], [3, 4]]))
	Traceback (most recent call last):
	TypeError: invalid data type for einsum

'	if m_a is not a rectangle'
	>>> print(matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

'	if m_b is not a rectangle'
	>>> print(matrix_mul([[1, 2], [3, 4]], [[1], [2, 3]]))
	Traceback (most recent call last):
	ValueError: setting an array element with a sequence.

'	if m_a and m_b can not be multiplied'
	>>> print(matrix_mul([[1, 2], [4, 5]], [[6, 7], [8, 9], [3, 4]]))
	Traceback (most recent call last):
	ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)
